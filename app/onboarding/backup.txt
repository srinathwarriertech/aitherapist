"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Slider } from "@/components/ui/slider"

const items = [
    {
      id: "recents",
      label: "Recents",
    },
    {
      id: "home",
      label: "Home",
    },
    {
      id: "applications",
      label: "Applications",
    },
    {
      id: "desktop",
      label: "Desktop",
    },
    {
      id: "downloads",
      label: "Downloads",
    },
    {
      id: "documents",
      label: "Documents",
    },
  ] as const

const goals = [
  {
    id: "feel_happier",
    label: "Feel happier again",
  },
  {
    id: "regain_interest",
    label: "Regain interest in activities I used to enjoy",
  },
  {
    id: "feel_relaxed",
    label: "Feel more relaxed and in control",
  },
  {
    id: "improve_sleep",
    label: "Improve my sleep",
  },
  {
    id: "reduce_alcohol",
    label: "Reduce my use of alcohol",
  },
  {
    id: "reduce_smoking",
    label: "Reduce my use of smoking, vaping or chew",
  },
  {
    id: "reduce_drugs",
    label: "Reduce my use of drugs",
  },
] as const

const mentalHealthFrequency = [
  { id: "not_at_all", label: "Not at all" },
  { id: "several_days", label: "Several days" },
  { id: "more_than_half", label: "More than half the days" },
  { id: "nearly_every_day", label: "Nearly every day" },
] as const

const formSchema = z.object({
  goals: z.array(z.string()).min(1, { message: "Please select at least one goal" }),
  productivity_impact: z.number().min(0).max(7),
  work_missed: z.number().min(0).max(7),
  relationship_issues: z.number().min(0).max(7),
  feeling_down: z.string().min(1, { message: "Please select an option" }),
})

export default function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      goals: [],
      productivity_impact: 0,
      work_missed: 0,
      relationship_issues: 0,
      feeling_down: "",
    },
  })
 
  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // âœ… This will be type-safe and validated.
    console.log(values)
  }

  return (
    <div className="max-w-2xl mx-auto p-8">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <FormField
            control={form.control}
            name="goals"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-base">What are some goals you would like to achieve while using Neuroliving?</FormLabel>
                <div className="space-y-2">
                  {goals.map((item) => (
                    <div key={item.id} className="flex items-start space-x-2">
                      <Checkbox
                        checked={field.value?.includes(item.id)}
                        onCheckedChange={(checked) => {
                          const updatedValue = checked
                            ? [...field.value, item.id]
                            : field.value?.filter((value) => value !== item.id)
                          field.onChange(updatedValue)
                        }}
                      />
                      <FormLabel className="font-normal">{item.label}</FormLabel>
                    </div>
                  ))}
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="space-y-4">
            <h3 className="text-base font-medium">
              In the past week, how many days have physical or mental health problems in your life caused you to...
            </h3>

            <FormField
              control={form.control}
              name="productivity_impact"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Be less productive at work</FormLabel>
                  <FormControl>
                    <div className="flex flex-col space-y-4">
                      <Slider
                        min={0}
                        max={7}
                        step={1}
                        value={[field.value]}
                        onValueChange={([value]) => field.onChange(value)}
                      />
                      <div className="flex justify-between text-xs text-muted-foreground">
                        <span>0 days</span>
                        <span>7 days</span>
                      </div>
                    </div>
                  </FormControl>
                  <FormDescription>Selected: {field.value} days</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="work_missed"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Miss work or not carry out daily work-related responsibilities</FormLabel>
                  <FormControl>
                    <div className="flex flex-col space-y-4">
                      <Slider
                        min={0}
                        max={7}
                        step={1}
                        value={[field.value]}
                        onValueChange={([value]) => field.onChange(value)}
                      />
                      <div className="flex justify-between text-xs text-muted-foreground">
                        <span>0 days</span>
                        <span>7 days</span>
                      </div>
                    </div>
                  </FormControl>
                  <FormDescription>Selected: {field.value} days</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="relationship_issues"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Experience relationship issues with family and/or friends</FormLabel>
                  <FormControl>
                    <div className="flex flex-col space-y-4">
                      <Slider
                        min={0}
                        max={7}
                        step={1}
                        value={[field.value]}
                        onValueChange={([value]) => field.onChange(value)}
                      />
                      <div className="flex justify-between text-xs text-muted-foreground">
                        <span>0 days</span>
                        <span>7 days</span>
                      </div>
                    </div>
                  </FormControl>
                  <FormDescription>Selected: {field.value} days</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <FormField
            control={form.control}
            name="feeling_down"
            render={({ field }) => (
              <FormItem className="space-y-3">
                <FormLabel>How often have you been bothered by feeling down, depressed, or hopeless?</FormLabel>
                <div className="space-y-2">
                  {mentalHealthFrequency.map((option) => (
                    <div key={option.id} className="flex items-center space-x-2">
                      <FormControl>
                        <input
                          type="radio"
                          className="form-radio"
                          id={option.id}
                          {...field}
                          value={option.id}
                          checked={field.value === option.id}
                        />
                      </FormControl>
                      <label htmlFor={option.id} className="text-sm font-normal">
                        {option.label}
                      </label>
                    </div>
                  ))}
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          <Button type="submit">Submit</Button>
        </form>
      </Form>
    </div>
  )
}
